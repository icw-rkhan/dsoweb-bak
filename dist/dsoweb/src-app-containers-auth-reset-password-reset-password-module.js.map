{"version":3,"sources":["webpack:///./src/app/containers/auth/reset-password/reset-password.component.html","webpack:///./src/app/containers/auth/reset-password/reset-password.component.ts","webpack:///./src/app/containers/auth/reset-password/reset-password.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4tEAA4tE,oE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5qE;AACS;AAC0B;AAGd;AACJ;AAMjE;IAME,gCAAoB,MAAc,EACd,KAAqB,EACrB,EAAe,EACf,WAAwB,EACxB,QAAyB,EACzB,cAA8B;QAL9B,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,OAAE,GAAF,EAAE,CAAa;QACf,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAiB;QACzB,mBAAc,GAAd,cAAc,CAAgB;QAChD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;IACjC,CAAC;IAED,yCAAQ,GAAR;QAAA,iBAUC;QATC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAC/B,UAAU,CAAC;YACT,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAI,+CAAW;aAAf;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC;;;OAAA;IAED,sBAAI,4CAAQ;aAAZ;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;;;OAAA;IAED,sBAAI,+CAAW;aAAf;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC;;;OAAA;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBACnC,yDAAU,CAAC,QAAQ;iBACpB,CAAC,CAAC;YACH,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAChC,yDAAU,CAAC,QAAQ;iBACpB,CAAC,CAAC;YACH,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBACnC,yDAAU,CAAC,QAAQ;iBACpB,CAAC,CAAC;SACJ,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,+CAAc,GAAd,UAAe,EAAmB;QAChC,IAAM,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACtC,IAAM,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;QAEhD,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,2CAAU,GAAV;QAAA,iBA8BC;QA7BC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtC,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,YAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,IAAK,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,SAAS,CACtG,UAAC,IAAS;YACR,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC;oBACrB,QAAQ,EAAE,KAAI,CAAC,KAAK;oBACpB,QAAQ,EAAE,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;iBACnC,CAAC,CAAC,SAAS,CACV,UAAC,aAAkB;oBACjB,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACvC,WAAW,CAAC,WAAW,EAAE,CAAC;oBAE1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;wBACd,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;wBAC7C,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAClC;gBACH,CAAC,EACD,aAAG;oBACD,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACvC,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC5B,CAAC,CACF,CAAC;aACH;iBAAM;gBACL,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACvC,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC1B,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;aACxE;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IA3FU,sBAAsB;QAJlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,8IAA8C;SAC/C,CAAC;yCAO4B,sDAAM;YACP,8DAAc;YACjB,0DAAW;YACF,2DAAW;YACd,+DAAe;YACT,wEAAc;OAXvC,sBAAsB,CA4FlC;IAAD,6BAAC;CAAA;AA5FkC;;;;;;;;;;;;;;;;;;;;;;;;;ACZM;AACc;AAER;AACqB;AAEpE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gFAAsB;KAClC;CACF,CAAC;AAWF;IAAA;IAAmC,CAAC;IAAvB,mBAAmB;QAT/B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,oDAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE;gBACZ,gFAAsB;aACvB;SACF,CAAC;OACW,mBAAmB,CAAI;IAAD,0BAAC;CAAA;AAAJ","file":"src-app-containers-auth-reset-password-reset-password-module.js","sourcesContent":["module.exports = \"<nav class=\\\"whiteNav\\\">\\n  <div class=\\\"pageTitle\\\">\\n    RESET PASSWORD?\\n  </div>\\n</nav>\\n<main>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"mt-2\\\">\\n      <form [formGroup]=\\\"form\\\">\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"text\\\" formControlName=\\\"email_token\\\" class=\\\"form-control withBg\\\" placeholder=\\\"Enter your temporary password\\\">\\n          <div *ngIf=\\\"email_token.invalid && (email_token.dirty || email_token.touched)\\\">\\n            <div class=\\\"invalid-input\\\" *ngIf=\\\"email_token.errors.required\\\">The temporary password can't be blank.</div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control withBg\\\" placeholder=\\\"New Password\\\">\\n          <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n            <div class=\\\"invalid-input\\\" *ngIf=\\\"password.errors.required\\\">Password can't be blank.</div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"password\\\" formControlName=\\\"confirmPass\\\" class=\\\"form-control withBg\\\" placeholder=\\\"Confirm password\\\">\\n          <div *ngIf=\\\"confirmPass.errors?.notSame && confirmPass.invalid && (confirmPass.dirty || confirmPass.touched)\\\">\\n            <div class=\\\"invalid-input\\\" *ngIf=\\\"confirmPass.errors?.notSame\\\">Password does not match.</div>\\n          </div>\\n        </div>\\n        <p class=\\\"form-warning\\\" (click)=\\\"isShowRequirement = !isShowRequirement\\\">\\n          Password Requirements\\n        </p>\\n\\n        <div class=\\\"form-helper\\\" *ngIf=\\\"isShowRequirement\\\">\\n          <div class=\\\"content\\\">\\n            Your password should be at least 8-16 characters in length with at least one uppercase letter and one number\\n          </div>\\n          <div class=\\\"close\\\" (click)=\\\"isShowRequirement = false\\\">\\n            <img src=\\\"assets/images/icons/error-icon.png\\\">\\n          </div>\\n        </div>\\n        <button class=\\\"btn btn-default btn-full btn-primary mt-2 mb-2\\\" (click)=\\\"onResetPwd()\\\" [disabled]=\\\"!form.valid\\\">\\n          Reset Password\\n        </button>\\n\\n        <p class=\\\"textCenter mt-1\\\">Still having issues? <a style=\\\"color: #879aa8;\\\">Contact Us</a></p>\\n      </form>\\n    </div>\\n  </div>\\n</main>\"","import {Component, OnInit} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { CustomValidators } from 'ngx-custom-validators';\n\nimport {ApiErrorService, AuthService} from '../../../services/index';\nimport {SharingService} from '../../../services/sharing.service';\n\n@Component({\n  selector: 'dso-reset-password',\n  templateUrl: './reset-password.component.html'\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  form: FormGroup;\n  email: string;\n  isShowRequirement: boolean;\n\n  constructor(private router: Router,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private authService: AuthService,\n              private apiError: ApiErrorService,\n              private sharingService: SharingService) {\n    this.sharingService.showLoading(true);\n    this.isShowRequirement = false;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    const queryParams = this.route.snapshot.queryParams;\n    if (!queryParams.email) {\n      this.router.navigate(['/auth', 'forgot-password']);\n    }\n    this.email = queryParams.email;\n    setTimeout(() => {\n      this.sharingService.showLoading(false);\n    });\n  }\n\n  get email_token() {\n    return this.form.get('email_token');\n  }\n\n  get password() {\n    return this.form.get('password');\n  }\n\n  get confirmPass() {\n    return this.form.get('confirmPass');\n  }\n\n  initForm() {\n    this.form = this.fb.group({\n      email_token: ['', Validators.compose([\n        Validators.required\n      ])],\n      password: ['', Validators.compose([\n        Validators.required\n      ])],\n      confirmPass: ['', Validators.compose([\n        Validators.required\n      ])]\n    }, { validator: this.checkPasswords });\n  }\n\n  checkPasswords(ac: AbstractControl) {\n    const pass = ac.get('password').value;\n    const confirmPass = ac.get('confirmPass').value;\n\n    return pass === confirmPass ? null : ac.get('confirmPass').setErrors({ notSame: true });\n  }\n\n  onResetPwd() {\n    this.sharingService.showLoading(true);\n    const subResetPwd = this.authService.resetPassword({username: this.email, ...this.form.value}).subscribe(\n      (data: any) => {\n        if (!data.code) {\n          this.authService.login({\n            username: this.email,\n            password: this.form.value.password,\n          }).subscribe(\n            (loginResponse: any) => {\n              this.sharingService.showLoading(false);\n              subResetPwd.unsubscribe();\n\n              if (!data.code) {\n                this.authService.loginSuccess(loginResponse);\n                this.router.navigate(['/posts']);\n              }\n            },\n            err => {\n              this.sharingService.showLoading(false);\n              subResetPwd.unsubscribe();\n            }\n          );\n        } else {\n          this.sharingService.showLoading(false);\n          subResetPwd.unsubscribe();\n          this.apiError.checkError(data.code, this.form.value, 'reset_password');\n        }\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SharedModule } from '../../../shared';\nimport { ResetPasswordComponent } from './reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent\n  },\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    ResetPasswordComponent\n  ],\n})\nexport class ResetPasswordModule { }\n"],"sourceRoot":""}