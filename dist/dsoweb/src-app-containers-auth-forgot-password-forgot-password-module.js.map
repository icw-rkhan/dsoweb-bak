{"version":3,"sources":["webpack:///./src/app/containers/auth/forgot-password/forgot-password.component.html","webpack:///./src/app/containers/auth/forgot-password/forgot-password.component.ts","webpack:///./src/app/containers/auth/forgot-password/forgot-password.module.ts"],"names":[],"mappings":"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","file":"src-app-containers-auth-forgot-password-forgot-password-module.js","sourcesContent":["module.exports = \"<nav class=\\\"whiteNav\\\">\\n  <div class=\\\"pageTitle\\\">\\n    FORGOT PASSWORD?\\n  </div>\\n</nav>\\n<main>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"forgotPasswordBox\\\">\\n      <h3>Don't panic,</h3>\\n      <p>\\n        Just let us know your email address that you used to create an account.\\n      </p>\\n      <form [formGroup]=\\\"form\\\">\\n        <div class=\\\"form-group\\\">\\n          <div *ngIf=\\\"isError\\\" class=\\\"inputError\\\">The email address you provided does not match any email in our database</div>\\n          <input formControlName=\\\"email\\\" type=\\\"text\\\" class=\\\"form-control withBg\\\" placeholder=\\\"Email..\\\">\\n          <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\">\\n            <div class=\\\"invalid-input\\\" *ngIf=\\\"email.errors.required\\\">The email can't be blank.</div>\\n            <div class=\\\"invalid-input\\\" *ngIf=\\\"email.errors.email\\\">Please input correct email format.</div>\\n          </div>\\n        </div>\\n\\n        <button [disabled]=\\\"!form.valid\\\"\\n                (click)=\\\"sendEmail()\\\"\\n                class=\\\"btn btn-default btn-full btn-primary\\\">\\n          Send me a new password\\n        </button>\\n\\n        <p class=\\\"textCenter\\\">Nevermind, <a [routerLink]=\\\"['/auth','login']\\\" style=\\\"font-weight: 600;text-decoration: underline\\\">Take me back</a></p>\\n      </form>\\n    </div>\\n  </div>\\n</main>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormGroup, Validators, FormBuilder} from '@angular/forms';\nimport {CustomValidators} from 'ngx-custom-validators';\nimport {Router} from '@angular/router';\n\nimport {AuthService} from '../../../services/index';\nimport {AlertService} from '../../../services/alert.service';\nimport {SharingService} from '../../../services/sharing.service';\n\n@Component({\n  selector: 'dso-forgot-password',\n  templateUrl: './forgot-password.component.html'\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  isError: boolean;\n  form: FormGroup;\n\n  constructor(private fb: FormBuilder,\n              private authService: AuthService,\n              private router: Router,\n              private alertService: AlertService,\n              private sharingService: SharingService) {\n    this.sharingService.showLoading(true);\n    this.isError = false;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    setTimeout(() => {\n      this.sharingService.showLoading(false);\n    });\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n  initForm() {\n    this.form = this.fb.group({\n      email: ['', Validators.compose([\n        Validators.required,\n        CustomValidators.email\n      ])]\n    });\n  }\n\n  sendEmail() {\n    this.sharingService.showLoading(true);\n    const subEmail = this.authService.sendEmail(this.form.value).subscribe(\n      (data: any) => {\n        if (!data.code) {\n          this.alertService.successAlert('Your new password is on its way to your email address.')\n            .then(() => {\n              this.router.navigate(['/auth', 'reset-password'], { queryParams: {\n                email: this.form.value.email,\n              }});\n            });\n        } else if (data.code === 1003) {\n          this.isError = true;\n        }\n\n        this.sharingService.showLoading(false);\n        subEmail.unsubscribe();\n      },\n      err => {\n        this.sharingService.showLoading(false);\n        subEmail.unsubscribe();\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SharedModule } from '../../../shared';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ForgotPasswordComponent\n  },\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    ForgotPasswordComponent\n  ],\n})\nexport class ForgotPasswordModule { }\n"],"sourceRoot":""}